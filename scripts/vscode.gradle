
def vscodeFile = file("$buildDir/vscodeConfig.json")

def vsCodeVersion = '1.27.1'

def vscode32Url = "https://vscode-update.azurewebsites.net/${vsCodeVersion}/win32-archive/stable"
def vscode32ZipName = "VSCode-win32-ia32-${vsCodeVersion}.zip"
def vscode64Url = "https://vscode-update.azurewebsites.net/${vsCodeVersion}/win32-x64-archive/stable"
def vscode64ZipName = "VSCode-win32-x64-${vsCodeVersion}.zip"

def cppUrl = 'https://github.com/Microsoft/vscode-cpptools/releases/download/v0.18.1/cpptools-win32.vsix'
def cppVsix = 'Cpp.vsix'

def wpilibExtensionUrl = 'https://github.com/wpilibsuite/vscode-wpilib/releases/download/v2019.0.0-alpha-4/vscode-wpilib-2019.0.0-alpha-4.vsix'
def wpilibExtensionVsix = 'WPILib.vsix'

def javaDebugUrl = 'https://vscjava.gallery.vsassets.io/_apis/public/gallery/publisher/vscjava/extension/vscode-java-debug/0.12.2/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage'
def javaDebugVsix = 'JavaDebug.vsix'

def javaLangUrl = 'https://redhat.gallery.vsassets.io/_apis/public/gallery/publisher/redhat/extension/java/0.30.0/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage'
def javaLangVsix = "JavaLang.vsix"

def javaLangFile = file("$buildDir/$javaLangVsix")
def javaDebugFile = file("$buildDir/$javaDebugVsix")
def cppFile = file("$buildDir/$cppVsix")
def wpilibFile = file("$buildDir/$wpilibExtensionVsix")

def wpilibExtensionDownload = tasks.register("wpilibExtensionDownload", Download) {
  src wpilibExtensionUrl
  dest file("$buildDir/$wpilibExtensionVsix")
  overwrite false
}

def cppExtensionDownload = tasks.register("cppExtensionDownload", Download) {
  src cppUrl
  dest file("$buildDir/$cppVsix")
  overwrite false
}


def javaLangExtensionDownload = tasks.register("javaLangExtensionDownload", Download) {
  src javaLangUrl
  dest file("$buildDir/$javaLangVsix")
  overwrite false
}


def javaDebugExtensionDownload = tasks.register("javaDebugExtensionDownload", Download) {
  src javaDebugUrl
  dest file("$buildDir/$javaDebugVsix")
  overwrite false
}


def getInformationOfVsix = { vsix, map->
  def pkg = vsix.matching { include '**/extension/package.json' }.files.asList()[0]
  def packageJson = new groovy.json.JsonSlurper().parseText(pkg.text)
  map['name'] = "${packageJson.publisher}.${packageJson.name}".toString()
  map['version'] = packageJson.version
}

def vscodeTask = tasks.register('vscodeConfig', Task) {
  dependsOn wpilibExtensionDownload
  dependsOn cppExtensionDownload
  dependsOn javaLangExtensionDownload
  dependsOn javaDebugExtensionDownload

  inputs.file javaLangFile
  inputs.file javaDebugFile
  inputs.file cppFile
  inputs.file wpilibFile

  doLast {
    def config = [:]

    def wpilibMap = [:]
    wpilibMap['vsix'] = wpilibExtensionVsix
    getInformationOfVsix(zipTree(wpilibFile), wpilibMap)
    def cppMap = [:]
    cppMap['vsix'] = cppVsix
    getInformationOfVsix(zipTree(cppFile), cppMap)
    def javaLangMap = [:]
    javaLangMap['vsix'] = javaLangVsix
    getInformationOfVsix(zipTree(javaLangFile), javaLangMap)
    def javaDebugMap = [:]
    javaDebugMap['vsix'] = javaDebugVsix
    getInformationOfVsix(zipTree(javaDebugFile), javaDebugMap)

    config['VsCode32Url'] = vscode32Url
    config['VsCode32Name'] = vscode32ZipName
    config['VsCode64Url'] = vscode64Url
    config['VsCode64Name'] = vscode64ZipName

    config['wpilibExtension'] = wpilibMap

    config['thirdPartyExtensions'] = [
      cppMap,
      javaLangMap,
      javaDebugMap
    ]


    def gbuilder = getGsonBuilder()

    gbuilder.setPrettyPrinting()
    def json = gbuilder.create().toJson(config)

    vscodeFile.parentFile.mkdirs()

    vscodeFile.text = json
  }
}

ext.vscodeZipSetup = { Zip zip->
  zip.dependsOn vscodeTask
  zip.dependsOn wpilibExtensionDownload

  zip.inputs.file vscodeFile

  zip.from (vscodeFile) {
    into '/installUtils'
  }

  zip.from (javaLangFile) {
    into '/vsCodeExtensions'
  }
  zip.from (javaDebugFile) {
    into '/vsCodeExtensions'
  }
  zip.from (cppFile) {
    into '/vsCodeExtensions'
  }
  zip.from (wpilibFile) {
    into '/vsCodeExtensions'
  }

  zip.from ()
}
