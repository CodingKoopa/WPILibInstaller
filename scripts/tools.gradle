def toolsJson = file("$buildDir/tools.json")
def scriptBaseFile = file("files/ScriptBase.vbs")

def toolsJsonTask = tasks.register('toolsJson', Task) {

  def resolvedDeps = configurations.tools.resolvedConfiguration.resolvedArtifacts.toList()

  doLast {
    def config = []
    resolvedDeps.each {
      if (it.name == 'app') {
        def item = [:]
        item['name'] = 'ShuffleBoard'
        item['version'] = it.moduleVersion.id.version
        def artif = [:]
        artif['classifier'] = it.classifier
        artif['extension'] = it.extension
        def id = it.moduleVersion.id
        artif['groupId'] = id.group
        artif['version'] = id.version
        artif['artifactId'] = id.name
        item['artifact'] = artif
        config << item
      } else {
        def item = [:]
        item['name'] = it.name
        item['version'] = it.moduleVersion.id.version
        def artif = [:]
        artif['classifier'] = it.classifier
        artif['extension'] = it.extension
        def id = it.moduleVersion.id
        artif['groupId'] = id.group
        artif['version'] = id.version
        artif['artifactId'] = id.name
        item['artifact'] = artif
        config << item
      }
    }
    def gbuilder = getGsonBuilder()
    gbuilder.setPrettyPrinting()
    def json = gbuilder.create().toJson(config)

    toolsJson.parentFile.mkdirs()
    toolsJson.text = json
  }
}

ext.toolsConfig = {
  def toolsFolder = 'tools'
  return new Tuple2({ task->
    task.inputs.property 'toolsFolder', toolsFolder
  }, { config->
    def tools = [:]
    tools['Folder'] = toolsFolder
    tools['UpdaterExe'] = 'ToolsUpdater.exe'
    config['Tools'] = tools
  })
}

ext.toolsSetup = { Zip zip->
  zip.dependsOn toolsJsonTask
  zip.inputs.file toolsJson
  zip.inputs.file scriptBaseFile

  zip.from (toolsJson) {
    into '/tools'
  }

  zip.from (scriptBaseFile) {
    into '/tools'
  }
}
