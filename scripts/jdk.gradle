

apply plugin: 'de.undercouch.download'

def download32BitJdk = tasks.register('download32BitJdk', Download) {
  src 'https://github.com/wpilibsuite/frc-openjdk-windows/releases/download/v11.0.0u28-1/jdk-x86-11.0.0u28-1.zip'
  dest buildDir
  overwrite false
}

def jdk32Location = file("$buildDir/jdk32")

def extract32BitJdk = tasks.register('extract32BitJdk', Copy) {
  dependsOn download32BitJdk
  from zipTree(file("$buildDir/jdk-x86-11.0.0u28-1.zip")).matching{ include "jdk/**"}
  into jdk32Location
  eachFile { f->
    f.path = f.path.substring(4) // length of jdk/
  }
  exclude '**/src.zip'
  exclude '**/bin/*.pdb'
  exclude '**/bin/*.map'
  exclude '**/bin/server/*.pdb'
  exclude '**/bin/server/*.map'
  exclude '**/demo/**'

  includeEmptyDirs = false
}

def download64BitJdk = tasks.register('download64BitJdk', Download) {
  src 'https://download.java.net/java/GA/jdk11/28/GPL/openjdk-11+28_windows-x64_bin.zip'
  dest buildDir
  overwrite false
}

def jdk64Location = file("$buildDir/jdk64")

def extract64BitJdk = tasks.register('extract64BitJdk', Copy) {
  dependsOn download64BitJdk
  from zipTree(file("$buildDir/openjdk-11+28_windows-x64_bin.zip")).matching{ include "jdk-11/**"}
  into jdk64Location
  eachFile { f->
    f.path = f.path.substring(7) // length of jdk-11/
  }

  exclude '**/src.zip'

  includeEmptyDirs = false
}

def version32 = 'openjdk version "11.0.0.28-internal" 2018-09-25'
def version64 = 'openjdk version "11" 2018-09-25'

def jdk32ConfigFile = file("$buildDir/jdk32config.json")

def jdkConfigFile32Task = tasks.register("jdkConfigFile32") {
  outputs.file jdk32ConfigFile
  inputs.property 'version', version32

  doLast {

    def config = [:]
    config['is32'] = true
    config['version'] = version32
    config['folder'] = 'jdk'

    def gbuilder = getGsonBuilder()

    gbuilder.setPrettyPrinting()
    def json = gbuilder.create().toJson(config)

    jdk32ConfigFile.parentFile.mkdirs()

    jdk32ConfigFile.text = json
  }
}

def jdk64ConfigFile = file("$buildDir/jdk64config.json")

def jdkConfigFile64Task = tasks.register("jdkConfigFile64") {
  it.outputs.file jdk64ConfigFile
  it.inputs.property 'version', version64

  doLast {

    def config = [:]
    config['is32'] = false
    config['version'] = version64
    config['folder'] = 'jdk'

    def gbuilder = getGsonBuilder()

    gbuilder.setPrettyPrinting()
    def json = gbuilder.create().toJson(config)

    jdk64ConfigFile.parentFile.mkdirs()

    jdk64ConfigFile.text = json
  }
}

ext.jdkZipSetup32 = { Zip zip->
  zip.dependsOn extract32BitJdk
  zip.dependsOn jdkConfigFile32Task

  zip.inputs.dir jdk32Location
  zip.inputs.file jdk32ConfigFile

  zip.from(jdk32Location) {
    into '/jdk'
  }

  zip.from(jdk32ConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetup64 = { Zip zip->
  zip.dependsOn extract64BitJdk
  zip.dependsOn jdkConfigFile64Task

  zip.inputs.dir jdk64Location
  zip.inputs.file jdk64ConfigFile

  zip.from(jdk64Location) {
    into '/jdk'
  }

    zip.from(jdk64ConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}
